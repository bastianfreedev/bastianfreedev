import { __decorate, __extends, __spread } from 'tslib';
import { autorun, reaction, action as action$1, computed as computed$1, observable as observable$1 } from 'mobx';
import { TemplateRef, ViewContainerRef, Input, Directive, NgModule } from '@angular/core';

// import { mobxAngularDebug } from '../utils/mobx-angular-debug';
var MobxAutorunDirective = /** @class */ (function () {
    function MobxAutorunDirective(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.templateBindings = {};
    }
    MobxAutorunDirective.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.templateRef);
        if (this.dispose) {
            this.dispose();
        }
        if (this.shouldDetach()) {
            this.view.detach();
        }
        this.autoDetect(this.view);
        // mobxAngularDebug(this.view, this.dispose);
    };
    MobxAutorunDirective.prototype.shouldDetach = function () {
        return this.mobxAutorun && this.mobxAutorun.detach;
    };
    MobxAutorunDirective.prototype.autoDetect = function (view) {
        this.dispose = autorun(function () { return view.detectChanges(); });
    };
    MobxAutorunDirective.prototype.ngOnDestroy = function () {
        if (this.dispose) {
            this.dispose();
        }
    };
    MobxAutorunDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    __decorate([
        Input()
    ], MobxAutorunDirective.prototype, "mobxAutorun", void 0);
    MobxAutorunDirective = __decorate([
        Directive({ selector: '[mobxAutorun]' })
    ], MobxAutorunDirective);
    return MobxAutorunDirective;
}());

var MobxReactionDirective = /** @class */ (function (_super) {
    __extends(MobxReactionDirective, _super);
    function MobxReactionDirective(templateRef, viewContainer) {
        var _this = _super.call(this, templateRef, viewContainer) || this;
        _this.templateRef = templateRef;
        _this.viewContainer = viewContainer;
        return _this;
    }
    MobxReactionDirective.prototype.autoDetect = function (view) {
        this.dispose = reaction(this.mobxReaction, function () {
            view.detectChanges();
        }, { fireImmediately: true });
    };
    MobxReactionDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef }
    ]; };
    __decorate([
        Input()
    ], MobxReactionDirective.prototype, "mobxReaction", void 0);
    MobxReactionDirective = __decorate([
        Directive({ selector: '[mobxReaction]' })
    ], MobxReactionDirective);
    return MobxReactionDirective;
}(MobxAutorunDirective));

var DIRECTIVES = [MobxAutorunDirective, MobxReactionDirective];
var MobxAngularModule = /** @class */ (function () {
    function MobxAngularModule() {
    }
    MobxAngularModule = __decorate([
        NgModule({
            declarations: DIRECTIVES,
            exports: DIRECTIVES
        })
    ], MobxAngularModule);
    return MobxAngularModule;
}());

/*
 * Public API Surface of mobx-angular
 */
// Re-export mobx operators to be able to use inside components with AOT:
function actionInternal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return action$1.apply(void 0, __spread(args));
}
var action = Object.assign(actionInternal, action$1);
function computedInternal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return computed$1.apply(void 0, __spread(args));
}
var computed = Object.assign(computedInternal, computed$1);
function observableInternal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return observable$1.apply(void 0, __spread(args));
}
var observable = Object.assign(observableInternal, observable$1);

/**
 * Generated bundle index. Do not edit.
 */

export { MobxAngularModule, MobxAutorunDirective, MobxReactionDirective, action, actionInternal, computed, observable };
//# sourceMappingURL=mobx-angular.js.map
