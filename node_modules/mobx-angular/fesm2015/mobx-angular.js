import { autorun, reaction, action as action$1, computed as computed$1, observable as observable$1 } from 'mobx';
import { __decorate } from 'tslib';
import { TemplateRef, ViewContainerRef, Input, Directive, NgModule } from '@angular/core';

// import { mobxAngularDebug } from '../utils/mobx-angular-debug';
let MobxAutorunDirective = class MobxAutorunDirective {
    constructor(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.templateBindings = {};
    }
    ngOnInit() {
        this.view = this.viewContainer.createEmbeddedView(this.templateRef);
        if (this.dispose) {
            this.dispose();
        }
        if (this.shouldDetach()) {
            this.view.detach();
        }
        this.autoDetect(this.view);
        // mobxAngularDebug(this.view, this.dispose);
    }
    shouldDetach() {
        return this.mobxAutorun && this.mobxAutorun.detach;
    }
    autoDetect(view) {
        this.dispose = autorun(() => view.detectChanges());
    }
    ngOnDestroy() {
        if (this.dispose) {
            this.dispose();
        }
    }
};
MobxAutorunDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
__decorate([
    Input()
], MobxAutorunDirective.prototype, "mobxAutorun", void 0);
MobxAutorunDirective = __decorate([
    Directive({ selector: '[mobxAutorun]' })
], MobxAutorunDirective);

let MobxReactionDirective = class MobxReactionDirective extends MobxAutorunDirective {
    constructor(templateRef, viewContainer) {
        super(templateRef, viewContainer);
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    autoDetect(view) {
        this.dispose = reaction(this.mobxReaction, () => {
            view.detectChanges();
        }, { fireImmediately: true });
    }
};
MobxReactionDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
__decorate([
    Input()
], MobxReactionDirective.prototype, "mobxReaction", void 0);
MobxReactionDirective = __decorate([
    Directive({ selector: '[mobxReaction]' })
], MobxReactionDirective);

const DIRECTIVES = [MobxAutorunDirective, MobxReactionDirective];
let MobxAngularModule = class MobxAngularModule {
};
MobxAngularModule = __decorate([
    NgModule({
        declarations: DIRECTIVES,
        exports: DIRECTIVES
    })
], MobxAngularModule);

/*
 * Public API Surface of mobx-angular
 */
// Re-export mobx operators to be able to use inside components with AOT:
function actionInternal(...args) {
    return action$1(...args);
}
const action = Object.assign(actionInternal, action$1);
function computedInternal(...args) {
    return computed$1(...args);
}
const computed = Object.assign(computedInternal, computed$1);
function observableInternal(...args) {
    return observable$1(...args);
}
const observable = Object.assign(observableInternal, observable$1);

/**
 * Generated bundle index. Do not edit.
 */

export { MobxAngularModule, MobxAutorunDirective, MobxReactionDirective, action, actionInternal, computed, observable };
//# sourceMappingURL=mobx-angular.js.map
